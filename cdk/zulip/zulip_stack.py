from aws_cdk import (
    aws_ec2,
    aws_elasticloadbalancingv2,
    aws_iam,
    aws_logs,
    aws_route53,
    Aws,
    CfnCondition,
    CfnDeletionPolicy,
    CfnMapping,
    CfnOutput,
    CfnParameter,
    Fn,
    Stack,
    Tags,
    Token
)
from constructs import Construct

from oe_patterns_cdk_common.alb import Alb
from oe_patterns_cdk_common.asg import Asg
from oe_patterns_cdk_common.vpc import Vpc

TWO_YEARS_IN_DAYS=731

# AMI list generated by:
# make AMI_ID=ami-07bb5101b6910f67d ami-ec2-copy
# on Mon Mar 14 19:44:16 UTC 2022.
AMI_ID="ami-03afe0ebe42ebb228"
AMI_NAME="test"
generated_ami_ids = {
    "us-east-1": "ami-03afe0ebe42ebb228"
}
# End generated code block.

class ZulipStack(Stack):

    def __init__(self, scope: Construct, id: str, **kwargs) -> None:
        super().__init__(scope, id, **kwargs)

        # vpc
        vpc = Vpc(self, "Vpc")

        # cloudwatch
        app_log_group = aws_logs.CfnLogGroup(
            self,
            "AppLogGroup",
            retention_in_days=TWO_YEARS_IN_DAYS
        )
        app_log_group.cfn_options.update_replace_policy = CfnDeletionPolicy.RETAIN
        app_log_group.cfn_options.deletion_policy = CfnDeletionPolicy.RETAIN
        system_log_group = aws_logs.CfnLogGroup(
            self,
            "SystemLogGroup",
            retention_in_days=TWO_YEARS_IN_DAYS
        )
        system_log_group.cfn_options.update_replace_policy = CfnDeletionPolicy.RETAIN
        system_log_group.cfn_options.deletion_policy = CfnDeletionPolicy.RETAIN

        # asg
        with open("zulip/launch_config_user_data.sh") as f:
            launch_config_user_data = f.read()
        asg = Asg(
            self,
            "Asg",
            allow_associate_address = True,
            default_instance_type = "t3.xlarge",
            log_group_arns = [
                app_log_group.attr_arn,
                system_log_group.attr_arn
            ],
            user_data_contents=launch_config_user_data,
            user_data_variables = {},
            vpc=vpc
        )

        ami_mapping={ "AMI": { "OEZULIP": AMI_NAME } }
        for region in generated_ami_ids.keys():
            ami_mapping[region] = { "AMI": generated_ami_ids[region] }
        aws_ami_region_map = CfnMapping(
            self,
            "AWSAMIRegionMap",
            mapping=ami_mapping
        )

        alb = Alb(self, "Alb", asg=asg, vpc=vpc)
        asg.asg.target_group_arns = [ alb.https_target_group.ref ]

        route_53_hosted_zone_name_param = CfnParameter(
            self,
            "Route53HostedZoneName",
            default="",
            description="Optional: Route 53 Hosted Zone name in which a DNS record will be created by this template. Must already exist and be the domain part of the Hostname parameter, without trailing dot. E.G. 'internal.mycompany.com'"
        )
        hostname_param = CfnParameter(
            self,
            "Hostname",
            allowed_pattern="^(?!.*\/).*$",
            constraint_description="Hostname should not have any forward slashes",
            default="",
            description="Optional: The hostname to access the service. E.G. 'app.internal.mycompany.com'"
        )
        route_53_hosted_zone_name_exists_condition = CfnCondition(
            self,
            "Route53HostedZoneNameExists",
            expression=Fn.condition_not(Fn.condition_equals(route_53_hosted_zone_name_param.value, ""))
        )
        hostname_exists_condition = CfnCondition(
            self,
            "HostnameExists",
            expression=Fn.condition_not(Fn.condition_equals(hostname_param.value, ""))
        )
        # route 53
        record_set = aws_route53.CfnRecordSet(
            self,
            "RecordSet",
            hosted_zone_name=f"{route_53_hosted_zone_name_param.value_as_string}.",
            name=hostname_param.value_as_string,
            resource_records=[ alb.alb.attr_dns_name ],
            type="CNAME"
        )
        # https://github.com/aws/aws-cdk/issues/8431
        record_set.add_property_override("TTL", 60)
        record_set.cfn_options.condition = route_53_hosted_zone_name_exists_condition
        site_url_output = CfnOutput(
            self,
            "SiteUrlOutput",
            description="The URL Endpoint",
            value=Token.as_string(
                Fn.condition_if(
                hostname_exists_condition.logical_id,
                "https://{}".format(hostname_param.value_as_string),
                "https://{}".format(alb.alb.attr_dns_name)
            ))
        )
